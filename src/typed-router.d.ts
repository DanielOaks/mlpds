/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    'index': RouteRecordInfo<'index', '/', Record<never, never>, Record<never, never>>,
    '/contact': RouteRecordInfo<'/contact', '/contact', Record<never, never>, Record<never, never>>,
    '/contact2': RouteRecordInfo<'/contact2', '/contact2', Record<never, never>, Record<never, never>>,
    '/create-account': RouteRecordInfo<'/create-account', '/create-account', Record<never, never>, Record<never, never>>,
    '/guides/': RouteRecordInfo<'/guides/', '/guides', Record<never, never>, Record<never, never>>,
    '/guides/applying-value-to-shading': RouteRecordInfo<'/guides/applying-value-to-shading', '/guides/applying-value-to-shading', Record<never, never>, Record<never, never>>,
    '/guides/art-isnt-made-in-a-vacuum': RouteRecordInfo<'/guides/art-isnt-made-in-a-vacuum', '/guides/art-isnt-made-in-a-vacuum', Record<never, never>, Record<never, never>>,
    '/guides/backgrounds': RouteRecordInfo<'/guides/backgrounds', '/guides/backgrounds', Record<never, never>, Record<never, never>>,
    '/guides/big-projects': RouteRecordInfo<'/guides/big-projects', '/guides/big-projects', Record<never, never>, Record<never, never>>,
    '/guides/bodies': RouteRecordInfo<'/guides/bodies', '/guides/bodies', Record<never, never>, Record<never, never>>,
    '/guides/chumpy/': RouteRecordInfo<'/guides/chumpy/', '/guides/chumpy', Record<never, never>, Record<never, never>>,
    '/guides/chumpy/1-sketching': RouteRecordInfo<'/guides/chumpy/1-sketching', '/guides/chumpy/1-sketching', Record<never, never>, Record<never, never>>,
    '/guides/chumpy/2-linework': RouteRecordInfo<'/guides/chumpy/2-linework', '/guides/chumpy/2-linework', Record<never, never>, Record<never, never>>,
    '/guides/chumpy/3-greyscale-shading': RouteRecordInfo<'/guides/chumpy/3-greyscale-shading', '/guides/chumpy/3-greyscale-shading', Record<never, never>, Record<never, never>>,
    '/guides/chumpy/4-pony-shading-and-lighting': RouteRecordInfo<'/guides/chumpy/4-pony-shading-and-lighting', '/guides/chumpy/4-pony-shading-and-lighting', Record<never, never>, Record<never, never>>,
    '/guides/chumpy/5-common-anatomy-errors': RouteRecordInfo<'/guides/chumpy/5-common-anatomy-errors', '/guides/chumpy/5-common-anatomy-errors', Record<never, never>, Record<never, never>>,
    '/guides/composition': RouteRecordInfo<'/guides/composition', '/guides/composition', Record<never, never>, Record<never, never>>,
    '/guides/critical-thinking': RouteRecordInfo<'/guides/critical-thinking', '/guides/critical-thinking', Record<never, never>, Record<never, never>>,
    '/guides/critique-lessons': RouteRecordInfo<'/guides/critique-lessons', '/guides/critique-lessons', Record<never, never>, Record<never, never>>,
    '/guides/dont-panic': RouteRecordInfo<'/guides/dont-panic', '/guides/dont-panic', Record<never, never>, Record<never, never>>,
    '/guides/gesturing': RouteRecordInfo<'/guides/gesturing', '/guides/gesturing', Record<never, never>, Record<never, never>>,
    '/guides/giving-critique-without-frustration': RouteRecordInfo<'/guides/giving-critique-without-frustration', '/guides/giving-critique-without-frustration', Record<never, never>, Record<never, never>>,
    '/guides/hair': RouteRecordInfo<'/guides/hair', '/guides/hair', Record<never, never>, Record<never, never>>,
    '/guides/heads': RouteRecordInfo<'/guides/heads', '/guides/heads', Record<never, never>, Record<never, never>>,
    '/guides/how-to-critique': RouteRecordInfo<'/guides/how-to-critique', '/guides/how-to-critique', Record<never, never>, Record<never, never>>,
    '/guides/hue-shifting': RouteRecordInfo<'/guides/hue-shifting', '/guides/hue-shifting', Record<never, never>, Record<never, never>>,
    '/guides/identifying-compositional-awkwardness': RouteRecordInfo<'/guides/identifying-compositional-awkwardness', '/guides/identifying-compositional-awkwardness', Record<never, never>, Record<never, never>>,
    '/guides/intention-in-art': RouteRecordInfo<'/guides/intention-in-art', '/guides/intention-in-art', Record<never, never>, Record<never, never>>,
    '/guides/keys-to-success-in-art': RouteRecordInfo<'/guides/keys-to-success-in-art', '/guides/keys-to-success-in-art', Record<never, never>, Record<never, never>>,
    '/guides/legs': RouteRecordInfo<'/guides/legs', '/guides/legs', Record<never, never>, Record<never, never>>,
    '/guides/measuring-and-comparing': RouteRecordInfo<'/guides/measuring-and-comparing', '/guides/measuring-and-comparing', Record<never, never>, Record<never, never>>,
    '/guides/measuring-and-maintaining-proportions': RouteRecordInfo<'/guides/measuring-and-maintaining-proportions', '/guides/measuring-and-maintaining-proportions', Record<never, never>, Record<never, never>>,
    '/guides/opponent-process-color': RouteRecordInfo<'/guides/opponent-process-color', '/guides/opponent-process-color', Record<never, never>, Record<never, never>>,
    '/guides/pony-anatomy': RouteRecordInfo<'/guides/pony-anatomy', '/guides/pony-anatomy', Record<never, never>, Record<never, never>>,
    '/guides/pony-anatomy-and-undersketching': RouteRecordInfo<'/guides/pony-anatomy-and-undersketching', '/guides/pony-anatomy-and-undersketching', Record<never, never>, Record<never, never>>,
    '/guides/pose-building-in-action': RouteRecordInfo<'/guides/pose-building-in-action', '/guides/pose-building-in-action', Record<never, never>, Record<never, never>>,
    '/guides/rules-and-exceptions': RouteRecordInfo<'/guides/rules-and-exceptions', '/guides/rules-and-exceptions', Record<never, never>, Record<never, never>>,
    '/guides/self-expression-and-creativity': RouteRecordInfo<'/guides/self-expression-and-creativity', '/guides/self-expression-and-creativity', Record<never, never>, Record<never, never>>,
    '/guides/shading': RouteRecordInfo<'/guides/shading', '/guides/shading', Record<never, never>, Record<never, never>>,
    '/guides/shadows-making-objects-appear-3d': RouteRecordInfo<'/guides/shadows-making-objects-appear-3d', '/guides/shadows-making-objects-appear-3d', Record<never, never>, Record<never, never>>,
    '/guides/sub-etiquette': RouteRecordInfo<'/guides/sub-etiquette', '/guides/sub-etiquette', Record<never, never>, Record<never, never>>,
    '/guides/twilights-creative-checklist': RouteRecordInfo<'/guides/twilights-creative-checklist', '/guides/twilights-creative-checklist', Record<never, never>, Record<never, never>>,
    '/guides/understanding-references': RouteRecordInfo<'/guides/understanding-references', '/guides/understanding-references', Record<never, never>, Record<never, never>>,
    '/guides/variety-in-art': RouteRecordInfo<'/guides/variety-in-art', '/guides/variety-in-art', Record<never, never>, Record<never, never>>,
    '/guides/what-is-critique': RouteRecordInfo<'/guides/what-is-critique', '/guides/what-is-critique', Record<never, never>, Record<never, never>>,
    '/guides/where-to-shade': RouteRecordInfo<'/guides/where-to-shade', '/guides/where-to-shade', Record<never, never>, Record<never, never>>,
    '/prompts': RouteRecordInfo<'/prompts', '/prompts', Record<never, never>, Record<never, never>>,
    '/wip-privacy': RouteRecordInfo<'/wip-privacy', '/wip-privacy', Record<never, never>, Record<never, never>>,
    '/wip-tos': RouteRecordInfo<'/wip-tos', '/wip-tos', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
